<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--spring中的依赖注入
       在当前类需要用到其他类的对象，有spring为我们提供，我们只需要在配置文件中说明
       依赖注入：
          能注入的数据：有三类
             基本类型和String
             其他bean类型（在配置文件中或者注解配置过的bean）
             复杂类型/集合类型
          注入的方式：有三种
             使用构造函数提供
             使用set方法提供
             使用注解提供
    -->

    <!--构造函数注入
          使用的标签：constructor-arg
          标签出现的位置：bean标签的内部
          标签中的属性：
                type：用于指定要注入的数据的数据类型，该数据类型也是构造函数中某个或者某些参数的类型
                index：用于指定要注入的数据给构造函数中指定索引位置的参数赋值，索引的位置从0开始
                name：用于指定给构造函数中指定名称的参数赋值（最方便，最好用）
                =====================================以上三个用于指定给构造函数中哪个参数赋值
                value：用于提供基本类型和String类型的数据
                ref：用于指定其他的bean类型数据，它指的就是在spring的Ioc核心容器中出现过的bean对象
         优势：
            在获取bean对象时，注入数据是必须的操作，否则对象无法创建成功
         弊端：
            改变了bean对象的实例化方式，使我们在创建对象时，如果用不到这些数据，也必须提供
    -->
    <bean id="accountService" class="cn.xx.service.AccountServiceImpl">
        <constructor-arg name="name" value="小明"></constructor-arg>
        <constructor-arg name="age" value="18"></constructor-arg>
        <constructor-arg name="birthday" ref="now"></constructor-arg>
    </bean>
    <!--配置一个日期对象-->
    <bean id="now" class="java.util.Date"></bean>

    <!--set方法注入
          使用的标签：property
          标签出现的位置：bean标签的内部
          标签中的属性：
                name：用于指定注入时所调用的set方法名称（去掉set后，首字母小写）
                value：用于提供基本类型和String类型的数据
                ref：用于指定其他的bean类型数据，它指的就是在spring的Ioc核心容器中出现过的bean对象
          优势：
              创建对象时没有明确的限制，可以直接使用默认构造函数
          弊端：
              如果有某个成员必须有值，则获取对象是有可能set方法没有执行。
    -->
    <bean id="accountService2" class="cn.xx.service.AccountServiceImpl2">
        <property name="name" value="小华"></property>
        <property name="age" value="12"></property>
        <property name="birthday" ref="now"></property>
        <property name="accountDao" ref="accountDao"></property>
    </bean>
    <bean id="accountDao" class="cn.xx.dao.AccountDaoImpl"></bean>

    <!--复杂类型/集合类型数据的注入
        用于给list结构集合注入的标签;
            list array set
        用于给map结构集合注入的标签：
            map props
        结构相同，标签可以互换
    -->
    <bean id="accountService3" class="cn.xx.service.AccountServiceImpl3">
        <property name="myStrs">
            <array>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </array>
        </property>
        <property name="myList">
            <list>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </list>
        </property>
        <property name="mySet">
            <set>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </set>
        </property>
        <property name="myMap">
            <map>
                <entry key="testA" value="AAA"></entry>
                <entry key="testB" value="BBB"></entry>
                <entry key="testC" value="CCC"></entry>
            </map>
        </property>
        <property name="myProes">
            <props>
                <prop key="testD">DDD</prop>
                <prop key="tsetE">EEE</prop>
            </props>
        </property>
    </bean>

</beans>